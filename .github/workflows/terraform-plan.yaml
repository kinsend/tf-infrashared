name: terraform-plan

on:
  pull_request:
    branches:
      - master

jobs:
  setup:
    runs-on: ks-linux

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: fetch master branch
        run: git fetch origin master

      - name: detect changed module path
        id: detect
        run: ./scripts/actions-detect-modules

    outputs:
      module_path_matrix: ${{ steps.detect.outputs.module_path_matrix }}
      status: ${{ steps.detect.outputs.status }}

  plan:
    runs-on: ks-linux
    needs: setup
    if: ${{ needs.setup.outputs.status == 'ok' }}
    strategy:
      matrix: ${{fromJSON(needs.setup.outputs.module_path_matrix)}}
    defaults:
      run:
        working-directory: ${{ matrix.module_path }}
    env:
      TF_CLI_ARGS: '-no-color'
      TF_VAR_aws_profile: kinsend-infra
      TF_LOG: error

    steps:

      - uses: actions/checkout@v3

      # this setup simply allows us to invoke scripts in the ./scripts directory
      # directly, without specifying a path
      - name: update $PATH
        run: echo "${GITHUB_WORKSPACE}/scripts" >> "${GITHUB_PATH}"

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: setup SSH configuration
        run: actions-setup-ssh-config
        env:
          SSH_KEY: ${{ secrets.KS_DEVOPS_BOT_SSH_KEY }}

      - name: setup AWS configuration
        run: actions-setup-aws-config

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.5

      - name: init
        id: init
        run: terraform init

      - name: validate
        id: validate
        run: terraform validate

      - name: plan
        id: plan
        run: terraform plan -out tfplan.binary

      - name: Terraform show
        run: terraform show -json tfplan.binary > plan.json

      # Install the Infracost CLI, see https://github.com/infracost/actions/tree/master/setup
      # for other inputs such as version, and pricing-api-endpoint (for self-hosted users).
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Generate Infracost JSON output, the following docs might be useful:
      # Multi-project/workspaces: https://www.infracost.io/docs/features/config_file
      # Combine Infracost JSON files: https://www.infracost.io/docs/features/cli_commands/#combined-output-formats
      - name: Generate Infracost JSON
        run: infracost breakdown --path plan.json --format json --out-file infracost.json
        # Env vars can be set using the usual GitHub Actions syntax
        # See the list of supported Infracost env vars here: https://www.infracost.io/docs/integrations/environment_variables/
        # env:
        #   MY_ENV: ${{ secrets.MY_ENV }}

      # See https://www.infracost.io/docs/features/cli_commands/#comment-on-pull-requests for other options.
      - name: Post Infracost comment
        run: |
          # Posts a comment to the PR using the 'update' behavior.
          # This creates a single comment and updates it. The "quietest" option.
          # The other valid behaviors are:
          #   delete-and-new - Delete previous comments and create a new one.
          #   hide-and-new - Minimize previous comments and create a new one.
          #   new - Create a new cost estimate comment on every push.
          infracost comment github --path infracost.json \
                                   --repo $GITHUB_REPOSITORY \
                                   --github-token ${{ secrets.KS_DEVOPS_BOT_TOKEN }} \
                                   --pull-request ${{github.event.pull_request.number}} \
                                   --behavior update

      - name: post results
        if: always()
        uses: actions/github-script@v6
        continue-on-error: true
        env:
          STEP_INIT_OUTCOME: ${{ steps.init.outcome }}
          STEP_INIT_STDERR: ${{ steps.init.outputs.stderr }}
          STEP_INIT_STDOUT: ${{ steps.init.outputs.stdout }}
          STEP_VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
          STEP_VALIDATE_STDERR: ${{ steps.validate.outputs.stderr }}
          STEP_VALIDATE_STDOUT: ${{ steps.validate.outputs.stdout }}
          STEP_PLAN_OUTCOME: ${{ steps.plan.outcome }}
          STEP_PLAN_STDERR: ${{ steps.plan.outputs.stderr }}
          STEP_PLAN_STDOUT: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.KS_DEVOPS_BOT_TOKEN }}
          script: |
            const helpers = require('./scripts/actions-script-helpers.js');
        
            helpers.commentResults(
              github,
              context,
              '${{ matrix.module_path }}',
              [
                {name: "init"},
                {name: "validate"},
                {name: "plan", detailedSuccess: true},
              ],
            );
